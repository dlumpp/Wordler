@using Wordler.Core;
@using Wordler.Web.Components;

@inject IMixerService MixerService;

<div>
    <WordInput WordChanged="@GreenWordChangedAsync" Status="LetterStatus.Green" />
</div>

<div>
    @for (int i = 0; i < YellowWordCount; i++)
    {
        <div>
            @{var wordIndex = i;}
            <WordInput WordChanged="@(word => YellowWordChangedAsync(word, wordIndex))" Status="LetterStatus.Yellow" />
            @if(i == YellowWordCount - 1)
            {                
                <button class="add-yellow-btn" @onclick="@(() => YellowWordCount++)">+</button>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public EventCallback<IEnumerable<string>> PossibilitesChanged { get; set; }

    int YellowWordCount = 1;

    Dictionary<int, IEnumerable<LetterSpace>> YellowWords = new();

    IEnumerable<LetterSpace>? GreenWord;

    async Task YellowWordChangedAsync(LetterSpace?[] word, int wordIndex)
    {
        YellowWords[wordIndex] = WhereNotNull(word);
        await RecalcPossibilitiesAsync();
    }

    async Task GreenWordChangedAsync(LetterSpace?[] word)
    {
        GreenWord = WhereNotNull(word);
        await RecalcPossibilitiesAsync();
    }

    IEnumerable<LetterSpace> WhereNotNull(IEnumerable<LetterSpace?> values) =>
        values.Where(l => l is not null && l.Value is not null)
            .Cast<LetterSpace>();

    async Task RecalcPossibilitiesAsync()
    {
        var letters = EmptyIfNull(AggregateYellowKnowledge()).Concat(EmptyIfNull(GreenWord));
        var mix = letters.Any(l => l.Value.HasValue) ?
            MixerService.Mix(letters).Select(LettersToWord)
            : Array.Empty<string>();
        await PossibilitesChanged.InvokeAsync(mix.ToList());
    }

    IEnumerable<LetterSpace> AggregateYellowKnowledge()
    {
        //clone current state to not mutate during aggregation
        List<List<LetterSpace>> yellowWords = YellowWords.Values
            .Select(i => i.Select(j => new LetterSpace { Value = j.Value, NotAt = new(j.NotAt) }).ToList()).ToList();

        var agg = new List<LetterSpace>();

        //spread the same "not at" info to all same letters across all words
        var sameLetters = yellowWords.SelectMany(word => word)
            .GroupBy(l => l.Value)
            .Where(g => g.Count() > 1);
        foreach (var letterGroup in sameLetters)
        {
            var distinctNotIndexes = letterGroup.SelectMany(m => m.NotAt).ToHashSet();
            foreach (var repeatLetter in letterGroup)
            {
                repeatLetter.NotAt = distinctNotIndexes.ToList();
            }
        }

        //aggregate words to a single list of letters
        foreach (var word in yellowWords)
        {
            //add repeat letters if within the same word
            var repeatLetters = word.GroupBy(l => l.Value).Where(g => g.Count() > 1);
            foreach (var letterGroup in repeatLetters)
            {
                foreach (var repeatLetter in letterGroup)
                {
                    agg.Add(repeatLetter);
                }
            }
            //aggregate non-repeats
            var remainingLetters = word.Except(agg);
            foreach (var letter in remainingLetters)
            {
                // might already be there w aggregated indexes from another word
                if (!agg.Any(l => l.Value == letter.Value))
                {
                    agg.Add(letter);
                }
            }
        }
        return agg;
    }

    IEnumerable<T> EmptyIfNull<T>(IEnumerable<T>? values) => values ?? Array.Empty<T>();

    string LettersToWord(IEnumerable<char?> letters) =>
        new(letters.Select(l => l ?? '_').ToArray());
}