@using Wordler.Core;
@using Wordler.Web.Components;

<div>
    @for (int i = 0; i < YellowWordCount; i++)
    {
        var wordIndex = i;
        <WordInput WordChanged="@(word => YellowWordChangedAsync(word, wordIndex))" Status="LetterStatus.Yellow" />
    }
    <button @onclick="@(() => YellowWordCount++)">+</button>
</div>

<div>
    <WordInput WordChanged="@GreenWordChangedAsync" Status="LetterStatus.Green" />
</div>

@code {
    [Parameter]
    public EventCallback<IEnumerable<string>> PossibilitesChanged { get; set; }

    int YellowWordCount = 1;

    Dictionary<int, IEnumerable<LetterSpace>> YellowWords = new ();

    IEnumerable<LetterSpace>? GreenWord;

    async Task YellowWordChangedAsync(LetterSpace?[] word, int wordIndex)
    {
        YellowWords[wordIndex] = WhereNotNull(word);
        await RecalcPossibilitiesAsync();
    }

    async Task GreenWordChangedAsync(LetterSpace?[] word)
    {
        GreenWord = WhereNotNull(word);
        await RecalcPossibilitiesAsync();
    }

    IEnumerable<LetterSpace> WhereNotNull(IEnumerable<LetterSpace?> values) =>
        values.Where(l => l is not null && l.Value is not null)
            .Cast<LetterSpace>();

    async Task RecalcPossibilitiesAsync()
    {
        var letters = EmptyIfNull(AggregateYellowKnowledge()).Concat(EmptyIfNull(GreenWord));
        var mix = Mixer.Mix(letters).Select(LettersToWord).ToList();
        await PossibilitesChanged.InvokeAsync(mix);
    }

    IEnumerable<LetterSpace> AggregateYellowKnowledge()
    {
        var letterGroups = YellowWords.Values.SelectMany(l => l).GroupBy(l => l.Value);
        return letterGroups.Select(lg => 
            new LetterSpace 
            { 
                Value = lg.Key, 
                NotAt = lg.SelectMany(n => n.NotAt).Distinct().ToList() 
            });
    }

    IEnumerable<T> EmptyIfNull<T>(IEnumerable<T>? values) => values ?? Array.Empty<T>();

    string LettersToWord(IEnumerable<char?> letters) =>
        new(letters.Select(l => l ?? '_').ToArray());
}