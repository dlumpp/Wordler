@using FluentAssertions.Execution;
@using NSubstitute;

@inherits TestContext

@code {
    IMixerService MixerService;

    IEnumerable<LetterSpace> CapturedMixerInput = Array.Empty<LetterSpace>();

    const string TestPossibility = "MOCKS";
    List<IEnumerable<char?>> TestPossibilities = new() { TestPossibility.Cast<char?>() };

    public InputMixerTests()
    {
        MixerService = Substitute.For<IMixerService>();
        MixerService.Mix(Arg.Do<IEnumerable<LetterSpace>>(arg => CapturedMixerInput = arg))
            .Returns(TestPossibilities);
        Services.AddSingleton<IMixerService>(MixerService);
    }

    [Fact]
    public void ShouldPassSingleYellowToMixer_WhenInput()
    {
        var raised = new List<string>();
        Action<IEnumerable<string>> changed = (e) => raised = e.ToList();
        var cut = Render(@<InputMixer PossibilitesChanged="@changed" />);

        var input = cut.Find(".word-input.yellow input");
        input.Input("z");

        var letter = CapturedMixerInput.Single();
        letter.Value.Should().Be('z');
        letter.NotAt.Should().BeEquivalentTo(new[] { 0 });

        raised.Single().Should().Be(TestPossibility);
    }

    [Fact]
    public void ShouldPassDoubleYellowToMixer_WhenInput()
    {
        var raised = new List<string>();
        Action<IEnumerable<string>> changed = (e) => raised = e.ToList();
        var cut = Render(@<InputMixer PossibilitesChanged="@changed" />);

        var firstInput = cut.Find(".word-input.yellow input");
        firstInput.Input("z");
        var secondInput = cut.Find(".word-input.yellow input:nth-of-type(2)");
        secondInput.Input("z");

        CapturedMixerInput.Should().HaveCount(2).And
            .AllSatisfy(i =>
            {
                i.Value.Should().Be('z');
                i.NotAt.Should().BeEquivalentTo(new[] { 0, 1 });
            });

        raised.Single().Should().Be(TestPossibility);
    }

    [Fact]
    public void ShouldPassSingleYellowTwoNotsToMixer_WhenInput()
    {
        var raised = new List<string>();
        Action<IEnumerable<string>> changed = (e) => raised = e.ToList();
        var cut = Render(@<InputMixer PossibilitesChanged="@changed" />);

        var addButton = cut.Find("button");
        addButton.Click();
        var yellowWords = cut.FindAll(".yellow").ToList();
        var firstWordFirstLetter = yellowWords[0].GetElementsByTagName("input").First();
        var secondWordSecondLetter = yellowWords[1].GetElementsByTagName("input")[1];
        firstWordFirstLetter.Input("y");
        secondWordSecondLetter.Input("y");

        var letter = CapturedMixerInput.Single();
        letter.Value.Should().Be('y');
        letter.NotAt.Should().BeEquivalentTo(new[] { 0, 1 });

        raised.Single().Should().Be(TestPossibility);
    }

    [Fact]
    public void ShouldPassMultiYellowMultiNotsToMixer_WhenInput()
    {
        var raised = new List<string>();
        Action<IEnumerable<string>> changed = (e) => raised = e.ToList();
        var cut = Render(@<InputMixer PossibilitesChanged="@changed" />);

        var addButton = cut.Find("button");
        addButton.Click();
        var yellowWords = cut.FindAll(".yellow").ToList();
        var firstWordInputs = yellowWords[0].GetElementsByTagName("input");
        var secondWordInputs = yellowWords[1].GetElementsByTagName("input");
        
        firstWordInputs[0].Input("T");
        firstWordInputs[2].Input("I");
        firstWordInputs[3].Input("N");
        
        secondWordInputs[1].Input("I");
        secondWordInputs[2].Input("N");
        secondWordInputs[3].Input("T");

        var actual = CapturedMixerInput.ToDictionary(ls => ls.Value ?? throw new Exception("Value is null"), ls => ls.NotAt);
        using(new AssertionScope())
        {            
            actual['T'].Should().BeEquivalentTo(new[] { 0, 3 });
            actual['I'].Should().BeEquivalentTo(new[] { 1, 2 });
            actual['N'].Should().BeEquivalentTo(new[] { 2, 3 });
        }

        raised.Single().Should().Be(TestPossibility);
    }

}